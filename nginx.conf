events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Configuration des logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Configuration générale
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    # Configuration upstream pour load balancing
    upstream backend {
        server server:5000;
    }
    
    upstream frontend {
        server client:4173;
    }
    
    # Configuration serveur principal
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Headers de sécurité
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Configuration CORS pour l'API
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        
        # Gérer les requêtes OPTIONS (preflight CORS)
        if ($request_method = OPTIONS) {
            return 204;
        }
        
        # Routes API - proxy vers le backend
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Configuration pour les timeouts
            proxy_connect_timeout       60s;
            proxy_send_timeout          60s;
            proxy_read_timeout          60s;
            
            # Headers pour les cookies et sessions
            proxy_cookie_path / "/; HTTPOnly; Secure; SameSite=Lax";
        }
        
        # WebSocket pour temps réel
        location /ws {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Configuration WebSocket
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }
        
        # Assets statiques avec cache long terme
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            
            # Cache pour 1 an
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Headers de sécurité
            add_header X-Content-Type-Options nosniff;
        }
        
        # Toutes les autres routes - SPA Frontend
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Configuration pour SPA (Single Page Application)
            proxy_intercept_errors on;
            error_page 404 = @fallback;
        }
        
        # Fallback pour SPA - retourne index.html pour toutes les 404
        location @fallback {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
        }
        
        # Health checks
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Configuration HTTPS (optionnel - pour production avec certificats)
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     # Certificats SSL
    #     ssl_certificate /etc/ssl/certs/fullchain.pem;
    #     ssl_certificate_key /etc/ssl/private/privkey.pem;
    #     
    #     # Configuration SSL moderne
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # Même configuration que HTTP
    #     # ... (copier le contenu du serveur HTTP)
    # }
    
    # Redirection HTTP vers HTTPS (à activer en production)
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name your-domain.com;
    #     return 301 https://$server_name$request_uri;
    # }
}